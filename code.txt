
1.................
// src/store/otpSlice.js
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  value: ['', '', '', ''],
};

const otpSlice = createSlice({
  name: 'otp',
  initialState,
  reducers: {
    setOtp: (state, action) => {
      state.value = action.payload;
    },
    clearOtp: (state) => {
      state.value = ['', '', '', ''];
    },
  },
});

export const { setOtp, clearOtp } = otpSlice.actions;
export default otpSlice.reducer;


2.............
// src/store/store.js
import { configureStore } from '@reduxjs/toolkit';
import otpReducer from './otpSlice';

const store = configureStore({
  reducer: {
    otp: otpReducer,
  },
});

export default store;


3...............

// src/main.jsx or App.jsx
import { Provider } from 'react-redux';
import store from './store/store';
import App from './App';

<Provider store={store}>
  <App />
</Provider>



4..............


import React, { useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setOtp } from '../store/otpSlice'; // adjust the path if needed

const OtpInput = () => {
  const otp = useSelector((state) => state.otp.value);
  const dispatch = useDispatch();
  const inputsRef = useRef([]);

  const handleChange = (e, index) => {
    const value = e.target.value.replace(/\D/, '');
    const newOtp = [...otp];
    newOtp[index] = value;
    dispatch(setOtp(newOtp));

    if (value && index < 3) {
      inputsRef.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (e, index) => {
    if (e.key === 'Backspace' || e.key === 'Delete') {
      e.preventDefault();
      const newOtp = [...otp];
      newOtp[index] = '';
      dispatch(setOtp(newOtp));

      if (index > 0) {
        inputsRef.current[index - 1]?.focus();
      }
    }
  };

  const handlePaste = (e) => {
    e.preventDefault();
    const pasteData = e.clipboardData.getData('text').slice(0, 4).replace(/\D/g, '').split('');
    const newOtp = [...otp];
    pasteData.forEach((digit, i) => {
      if (i < 4) newOtp[i] = digit;
    });
    dispatch(setOtp(newOtp));

    const nextIndex = pasteData.length < 4 ? pasteData.length : 3;
    inputsRef.current[nextIndex]?.focus();
  };

  return (
    <div className="flex justify-center gap-4 mb-4" onPaste={handlePaste}>
      {otp.map((digit, index) => (
        <input
          key={index}
          type="text"
          inputMode="numeric"
          maxLength="1"
          className="w-12 h-14 text-center border rounded-md text-lg font-semibold focus:outline-none focus:ring-2 focus:ring-blue-400"
          value={digit}
          onChange={(e) => handleChange(e, index)}
          onKeyDown={(e) => handleKeyDown(e, index)}
          ref={(el) => (inputsRef.current[index] = el)}
        />
      ))}
    </div>
  );
};

export default OtpInput;
